// Problem 1

s = leetcode
s = loveleetcode

int firstUnique(string s){
    vector<int> freq(26,0);
    for(int i=0;i<s.size();i++){
        freq[s[i] - 'a']++;
    }

    for(int i=0;i<s.size();i++){
        if(freq[s[i] - 'a'] == 1){
            return i;
        }
    }
    return -1;
}

// Problem 2

nums[] = [2,2,1] = 1
[4,1,2,1,2]

int singleNumber(vector<int> nums){
    if(nums.size() == 0){
        return -1;
    }
    unorderd_set<int> freq;
    for(int i=0;i<nums.size();i++){
        if(freq.count(nums[i]) > 0){
            freq.erase(nums[i]);
        }else{
            freq.insert(nums[i]);
        }
    }

    for(int ele:freq){
        return ele;
    }

    // Method 2 xor
    int xor =  nums[0];
    for(int i=0;i<nums.size();i++){
        xor ^= nums[i];
    }
    return xor;
}

// Problem 3

bool isPowerOfTwo(int n){
    int count=0;

    while(n>0){
        if(n&1 == 1){
            count++;
        }
        if(count > 1){
            return false;
        }
        n = n>>1; 
    }

    if(count == 1) 
        return true;
    else 
        return false
}

// Preoblem 4

bool judgeCircle(string moves) {
    int x=0,y=0;
    for(int i=0;i<moves.size();i++){
        if(moves[i] == 'U')
            x++;
        else if(moves[i] == 'D')
            x--;
        else if(moves[i] == 'L')
            y--;
        else if(moves[i] == 'R')
            y++;
    }
    
    if(x==0 && y==0) 
        return true;
    else 
        return false;
    
}

// Problem 7


bool hasPathSum(TreeNode* root, int sum){
    if(root == NULL || sum < 0){
        return false;
    }

    if(root->left == NULL && root->right == NULL && sum - root->val == 0){
        return true;
    }

    return hasPathSum(root->right, sum - root->val) || hasPathSum(root->right, sum - root->val);
    
}

// Problem 8
int renoveElement(vector<int>& nums, int val){
    int count=0;
    for(int i=0;i<nums.size();i++){
        if(nums[i] != val){
            nums[count] = nums[i];
            count++;
        }
    }
    return count;


    // Method 2
    int n = nums.size();
    int i=0;
    while(i<n){
        if(nums[i] == val){
            nums[i] = nums[n-1];
            n--;
        }else{
            i++;
        }
    }
}

// Problem 10 

vector<string> letterCombinations(string digits){
    unordered_map<char,string> num_to_char {
        {'2', "abc"},{ '3',"def" },{'4',"ghi}
    }
    vector<string> result;
    string combination(digits.length(),' ');
    update(digits, combination, 0, num_to_char, result);
}

void update(string digits, string& combination, int index, 
            unordered_map<char,string> num_to_char, vector<string> &result){
    if(index == digits.size()){
        result.push_back(combination);
        return;
    }

    for(char c:num_to_char){
        combinations[index] = c;
        update(digits, combination, index+1, result)
    }
}

// Problem 11
TreeNode{
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x){
        val = x;
        left = NULL;
        right = NULL;
    }
}

TreeNode* lca(TreeNode* root, TreeNode* p, TreeNode* q){
    if(root->val > p->val && root->val > q->val){
        return lca(root->left, p, q);
    } else if(root == p ) 
        return p;
    else if(root == q) 
        return q;


} 

// problem 14

vector<vector<int>> floodFill(vector<vector<int>> &image, int sr, int sc, int newColor){
    if(image.size() <= 0 || image[sr]){
        return image;
    }

    dfs(image, sr, sc, image[sr][sc], newColor);
    return image;
}

void dfs(vector<vector<int>> &image, int sr, int sc, int color, int newColor){
    if(sr<0 || sr>=image.size() || sc<0 || sc>=image[0].size() || image[sr][sc] != color){
        return ;
    }

    image[sr][sc] = newColor;
    dfs(image, sr-1, sc, color, newColor);
    dfs(image, sr+1, sc, color, newColor);
    dfs(image, sr, sc+1, color, newColor);
    dfs(image, sr, sc-1, color, newColor);    
}

// Problem 15

ListNode* reverse()

ListNode* reverse(ListNode* head){
    stack<ListNode*> st;

    while(head != NULL){
        st.push(head);
        head = head->next;
    }

    ListNode dummy(-1);
    head = &dummy;
    while(st.size()>0){
        head->next = st.top();
        st.pop();
        head = head->next;
    }
    head->next = NULL;
    return dummy.next;

    // Method 2
    ListNode* prev = NULL;
    ListNode* curr = head;
    Listnode* next = NULL;

    while(curr != NULL){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }

    return prev;
}


// Problem 19

vector<vector<int>> kClosest(vectr<vector<int>> &points, int k){
    int n = points.size();
    // Multimap is sorted in ASC order by key
    multimap<int,int> mymap;
    for(int i=0;i<n;i++){
        int x = points[i][0];
        int y = points[i][1];
        mymap.insert({ x*x + y*y , i});
    }
    
    vector<vector<int>> ans;
    
    int count = 0;
    for(auto it = mymap.begin(); count<K ; it++,count++ ){
        ans.push_back(points[it->second]);
    }
    
    return ans;
}

// Problem 20

int maxAreaOfIsland(vector<vector<int>> &grid){
    int maxArea = 0;

    for(int i = 0;i<grid.size(); i++){
        for(int j=0; j<grid[0].size();j++){
            if(grid[i][j] == 1){
                maxArea = max(maxArea, dfs(grid, i, j));
            }
        }
    }

    return maxArea;
}

int dfs(vector<vector<int>> &grid, int i, int j){
    if(i<0 || j<0 || i>=grid.size() || j>=grid[i].size() || grid[i][j] == 0){
        return 0;
    }

    grid[i][j] = 0;
    int count = 1;
    count += dfs(grid, i+1 , j);
    count += dfs(grid, i-1 , j);
    count += dfs(grid, i , j+1);
    count += dfs(grid, i , j-1);

    return count;
}


// Problem 23

vector<vector<string>> groupAnagrams(vector<string> &strs){
    map<string, vector<string>> anag;

    for(string current:strs){
        string sorted = current;
        sort(sorted.begin(), sorted.end());
        if(anag.count(sorted) > 0){
            anag[sorted].push_back(current);
        }else{
            vector<string> temp;
            temp.push_back(current);
            anag.insert({sorted, temp});
        }
    }

    vector<vector<int>> anagrams;
    for(pair ele:anag){
        anagrams.push_back(ele.second);
    }

    return anagrams;
}